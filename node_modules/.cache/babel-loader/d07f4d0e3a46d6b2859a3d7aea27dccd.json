{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/django-apps/final/CSCI4140-Cheerapp/src/containers/Form.js\";\nimport React from \"react\";\nimport { Form, Button, Select } from \"antd\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport * as navActions from \"../store/actions/nav\";\nimport * as messageActions from \"../store/actions/message\";\nimport { HOST_URL } from \"../settings\";\nconst FormItem = Form.Item;\n\nfunction hasErrors(fieldsError) {\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\nclass HorizontalAddChatForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      usernames: [],\n      error: null\n    };\n\n    this.handleChange = value => {\n      this.setState({\n        usernames: value\n      });\n    };\n\n    this.handleSubmit = e => {\n      const usernames = this.state.usernames;\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          const combined = [...usernames, this.props.username];\n          axios.defaults.xsrfHeaderName = \"X-CSRFTOKEN\";\n          axios.defaults.xsrfCookieName = \"csrftoken\";\n          axios.defaults.headers = {\n            \"Content-Type\": \"application/json\",\n            Authorization: \"Token \".concat(this.props.token)\n          };\n          axios.post(\"\".concat(HOST_URL, \"/chat/create/\"), {\n            messages: [],\n            participants: combined\n          }).then(res => {\n            this.props.history.push(\"/\".concat(res.data.id));\n            this.props.closeAddChatPopup();\n            this.props.getUserChats(this.props.username, this.props.token);\n          }).catch(err => {\n            console.error(err);\n            this.setState({\n              error: err\n            });\n          });\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.form.validateFields();\n  }\n\n  render() {\n    const _this$props$form = this.props.form,\n          getFieldDecorator = _this$props$form.getFieldDecorator,\n          getFieldsError = _this$props$form.getFieldsError,\n          getFieldError = _this$props$form.getFieldError,\n          isFieldTouched = _this$props$form.isFieldTouched;\n    const userNameError = isFieldTouched(\"userName\") && getFieldError(\"userName\");\n    return React.createElement(Form, {\n      layout: \"inline\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, this.state.error ? \"\".concat(this.state.error) : null, React.createElement(FormItem, {\n      validateStatus: userNameError ? \"error\" : \"\",\n      help: userNameError || \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, getFieldDecorator(\"userName\", {\n      rules: [{\n        required: true,\n        message: \"Please input the username of the person you want to chat with\"\n      }]\n    })(React.createElement(Select, {\n      mode: \"tags\",\n      style: {\n        width: \"100%\"\n      },\n      placeholder: \"Tags Mode\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, []))), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      disabled: hasErrors(getFieldsError()),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Start a chat\")));\n  }\n\n}\n\nconst AddChatForm = Form.create()(HorizontalAddChatForm);\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    username: state.auth.username\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    closeAddChatPopup: () => dispatch(navActions.closeAddChatPopup()),\n    getUserChats: (username, token) => dispatch(messageActions.getUserChats(username, token))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AddChatForm));","map":{"version":3,"sources":["/root/Desktop/django-apps/final/CSCI4140-Cheerapp/src/containers/Form.js"],"names":["React","Form","Button","Select","axios","connect","withRouter","navActions","messageActions","HOST_URL","FormItem","Item","hasErrors","fieldsError","Object","keys","some","field","HorizontalAddChatForm","Component","state","usernames","error","handleChange","value","setState","handleSubmit","e","preventDefault","props","form","validateFields","err","values","combined","username","defaults","xsrfHeaderName","xsrfCookieName","headers","Authorization","token","post","messages","participants","then","res","history","push","data","id","closeAddChatPopup","getUserChats","catch","console","componentDidMount","render","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","userNameError","rules","required","message","width","AddChatForm","create","mapStateToProps","auth","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Form, Button, Select } from \"antd\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport * as navActions from \"../store/actions/nav\";\nimport * as messageActions from \"../store/actions/message\";\nimport { HOST_URL } from \"../settings\";\n\nconst FormItem = Form.Item;\n\nfunction hasErrors(fieldsError) {\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\nclass HorizontalAddChatForm extends React.Component {\n  state = {\n    usernames: [],\n    error: null\n  };\n\n  handleChange = value => {\n    this.setState({\n      usernames: value\n    });\n  };\n\n  componentDidMount() {\n    this.props.form.validateFields();\n  }\n\n  handleSubmit = e => {\n    const { usernames } = this.state;\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        const combined = [...usernames, this.props.username];\n        axios.defaults.xsrfHeaderName = \"X-CSRFTOKEN\";\n        axios.defaults.xsrfCookieName = \"csrftoken\";\n        axios.defaults.headers = {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Token ${this.props.token}`\n        };\n        axios\n          .post(`${HOST_URL}/chat/create/`, {\n            messages: [],\n            participants: combined\n          })\n          .then(res => {\n            this.props.history.push(`/${res.data.id}`);\n            this.props.closeAddChatPopup();\n            this.props.getUserChats(this.props.username, this.props.token);\n          })\n          .catch(err => {\n            console.error(err);\n            this.setState({\n              error: err\n            });\n          });\n      }\n    });\n  };\n\n  render() {\n    const {\n      getFieldDecorator,\n      getFieldsError,\n      getFieldError,\n      isFieldTouched\n    } = this.props.form;\n\n    const userNameError =\n      isFieldTouched(\"userName\") && getFieldError(\"userName\");\n    return (\n      <Form layout=\"inline\" onSubmit={this.handleSubmit}>\n        {this.state.error ? `${this.state.error}` : null}\n        <FormItem\n          validateStatus={userNameError ? \"error\" : \"\"}\n          help={userNameError || \"\"}\n        >\n          {getFieldDecorator(\"userName\", {\n            rules: [\n              {\n                required: true,\n                message:\n                  \"Please input the username of the person you want to chat with\"\n              }\n            ]\n          })(\n            <Select\n              mode=\"tags\"\n              style={{ width: \"100%\" }}\n              placeholder=\"Tags Mode\"\n              onChange={this.handleChange}\n            >\n              {[]}\n            </Select>\n          )}\n        </FormItem>\n        <FormItem>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            disabled={hasErrors(getFieldsError())}\n          >\n            Start a chat\n          </Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nconst AddChatForm = Form.create()(HorizontalAddChatForm);\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    username: state.auth.username\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    closeAddChatPopup: () => dispatch(navActions.closeAddChatPopup()),\n    getUserChats: (username, token) =>\n      dispatch(messageActions.getUserChats(username, token))\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(AddChatForm)\n);\n"]},"metadata":{},"sourceType":"module"}